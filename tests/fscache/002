#!/bin/sh
# SPDX-License-Identifier: GPL-2.0+
#
# Test error path handling when OPEN request fails.
#
# During the looking up phase, if the cache file already exist under the
# root cache directory, Cachefiles will mark the inode of this cache file
# as IN_USE, and send an OPEN request to the user daemon. If the user daemon
# fails processing this OPEN request and returns error, Cachefiles shall
# unmark the inode IN_USE in the error path. In the old kernel, the error
# path is missing and thus the inode is leaked in IN_USE state. In this case,
# even when the user daemon processes OPEN request as expected next time, the
# mount will fail with "No buffer space available", since the inode of the
# cache file is still in IN_USE state.
#
# Kernel commit ea5dc046127e ("cachefiles: unmark inode in use in error path")
# fixes this.
#
seq=`basename $0`
seqres=$RESULT_DIR/$(echo $0 | awk '{print $((NF-1))"/"$NF}' FS="/")

# get standard environment, filters and checks
. "${srcdir}/common/rc"

cleanup()
{
	pkill cachefilesd2
	# wait for cachefiles daemon exiting, or the backing files
	# can't be deleted since they are still IN_USE.
	sleep 1

	cd /
	rm -rf $tmp.*
}

_require_erofs
_require_fscache

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here
echo "QA output created by $seq"

if [ -z $SCRATCH_DEV ]; then
	SCRATCH_DEV=$tmp/erofs_$seq.img
	rm -f SCRATCH_DEV
fi

localdir="$tmp/$seq"
rm -rf $localdir
mkdir -p $localdir

# collect files
echo "test" > $localdir/testfile

# prepare the backing file under root cache directory
($CACHEFILESD_PROG $tmp $tmp >> $seqres.full 2>&1 &)
_scratch_mkfs $localdir >> $seqres.full 2>&1 || _fail "failed to mkfs"
SCRATCH_OPTIONS="-o fsid=erofs_${seq}.img"
_scratch_mount 2>>$seqres.full
_scratch_unmount

pkill cachefilesd2
sleep 1

# test error path handling when OPEN request fails
($CACHEFILESD_PROG -p 0x001 $tmp $tmp >> $seqres.full 2>&1 &)
SCRATCH_OPTIONS="-o fsid=erofs_${seq}.img"
_try_scratch_mount 2>>$seqres.full && _fail "mount shall not succeed"

pkill cachefilesd2
sleep 1

# The backing file shall be unmarked with IN_USE in the above
# error path, and thus the following mount shall succeed with
# well behaved daemon.
($CACHEFILESD_PROG $tmp $tmp >> $seqres.full 2>&1 &)
SCRATCH_OPTIONS="-o fsid=erofs_${seq}.img"
_scratch_mount 2>>$seqres.full
cat $SCRATCH_MNT/testfile
_scratch_unmount

echo Silence is golden
status=0
exit 0
