#!/bin/sh
# SPDX-License-Identifier: GPL-2.0+
#
# Test the time sequence of closing device fd before closing anonymous fds.
# The previous implementation once caused the daemon hang (D state) when the
# daemon is going to exit. This is because the kernel implementation will pin
# the corresponding cachefiles object for each anonymous fd. The cachefiles
# object is unpinned when the anonymous fd gets closed. On the other hand, when
# the user daemon exits and the device fd gets closed, it will wait for all
# cahcefiles objects gets withdrawn. Then if there's any anonymous fd getting
# closed after the fd of the device node, the user daemon will hang forever,
# waiting for all objects getting withdrawn.
#
# This is fixed by the kernel commit d11b0b043b40 ("cachefiles: unbind
# cachefiles gracefully in on-demand mode").
#
seq=`basename $0`
seqres=$RESULT_DIR/$(echo $0 | awk '{print $((NF-1))"/"$NF}' FS="/")

# get standard environment, filters and checks
. "${srcdir}/common/rc"

CACHEFILESD_PROG=${PWD}/src/fscache011

cleanup()
{
	pkill fscache011
	# wait for cachefiles daemon exiting, or the backing files
	# can't be deleted since they are still IN_USE.
	sleep 1

	cd /
	rm -rf $tmp.*
}

_require_erofs
_require_fscache

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here
echo "QA output created by $seq"

if [ -z $SCRATCH_DEV ]; then
	SCRATCH_DEV=$tmp/erofs_$seq.img
	rm -f SCRATCH_DEV
fi

localdir="$tmp/$seq"
rm -rf $localdir
mkdir -p $localdir

# collect files
echo "test" > $localdir/testfile

# start the cachefiles daemon
($CACHEFILESD_PROG $tmp $tmp 2>>$seqres.full &)

_scratch_mkfs $localdir >> $seqres.full 2>&1 || _fail "failed to mkfs"
SCRATCH_OPTIONS="-o fsid=erofs_${seq}.img"
_try_scratch_mount 2>>$seqres.full && _fail "mount shall not succeed"

# wait for stdout of the cachefiles daemon
sleep 2

echo Silence is golden
status=0
exit 0
