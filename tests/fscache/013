#!/bin/sh
# SPDX-License-Identifier: GPL-2.0+
#
# Test if 'inuse' and 'cull' cmds work as expected.
#
seq=`basename $0`
seqres=$RESULT_DIR/$(echo $0 | awk '{print $((NF-1))"/"$NF}' FS="/")

# get standard environment, filters and checks
. "${srcdir}/common/rc"

cleanup()
{
	pkill cachefilesd2
	pkill fscache013
	# wait for cachefiles daemon exiting, or the backing files
	# can't be deleted since they are still IN_USE.
	sleep 1

	cd /
	rm -rf $tmp.*
}

_require_erofs
_require_fscache

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here
echo "QA output created by $seq"

if [ -z $SCRATCH_DEV ]; then
	SCRATCH_DEV=$tmp/erofs_$seq.img
	rm -f SCRATCH_DEV
fi

localdir="$tmp/$seq"
rm -rf $localdir
mkdir -p $localdir

# collect files
echo "test" > $localdir/testfile

_scratch_mkfs $localdir -Enoinline_data >> $seqres.full 2>&1 || _fail "failed to mkfs"
SCRATCH_OPTIONS="-o fsid=erofs_${seq}.img"

# start the default cachefilesd2 first, to make cache file ready
# under root cache directory
($CACHEFILESD_PROG $tmp $tmp >>$seqres.full 2>&1 &)
_scratch_mount 2>>$seqres.full
_scratch_unmount

pkill cachefilesd2
sleep 1

cachepath=$(find $tmp/cache -type f)
cachedir=$(dirname $cachepath)
cachename=$(basename $cachepath)

CACHEFILESD_PROG=${PWD}/src/fscache013
($CACHEFILESD_PROG $tmp $tmp $cachedir $cachename 2>>$seqres.full &)
_scratch_mount 2>>$seqres.full
cat $SCRATCH_MNT/testfile >/dev/null 2>>$seqres.full
_scratch_unmount

# wait for stdout flush of cachefiles daemon
sleep 2

echo Silence is golden
status=0
exit 0
